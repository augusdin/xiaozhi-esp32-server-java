# 通用配置（所有环境共享）
server.port=8091

# Mybatis配置
mybatis.mapper-locations=classpath*:com/xiaozhi/mapper/*.xml

# 数据库连接池通用配置
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.maximum-pool-size=15
spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.idle-timeout=120000
spring.datasource.hikari.pool-name=DatebookHikariCP
spring.datasource.hikari.max-lifetime=120000
spring.datasource.hikari.connection-timeout=10000000
spring.datasource.hikari.connection-test-query=SELECT 1

# 日志通用配置
logging.level.root=INFO
logging.level.org.springframework=INFO
logging.level.io.github.imfangs.dify.client.impl.StreamEventDispatcher=ERROR

# 禁用Groovy模板位置检查
spring.groovy.template.check-template-location=false

# 文件上传配置
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=2048MB
spring.servlet.multipart.max-request-size=2048MB

spring.jmx.enabled=false

# 允许的WebSocket源（跨域配置），多个源用逗号分隔
spring.websocket.allowed-origins=*

# 添加 Spring MVC Session 配置
spring.session.cookie.http-only=true
spring.session.cookie.secure=false
spring.session.cookie.same-site=lax
spring.session.cookie.path=/

# 启用虚拟线程
spring.threads.virtual.enabled=true

# SpringDoc OpenAPI 配置
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
# 启用 Swagger UI
springdoc.swagger-ui.enabled=true
# 确保静态资源映射正确
spring.web.resources.add-mappings=true
# 配置 Swagger UI 的 URL
springdoc.swagger-ui.url=/v3/api-docs

# Memory Services 配置 - 支持环境变量覆盖
# 可通过环境变量动态控制：MEMORY_ENABLED, MEMORY_MEM0_ENABLED, MEMORY_MEMOS_ENABLED
memory.enabled=${MEMORY_ENABLED:true}

# MemOS 配置（记忆检索和结构化存储服务）- 完全独立
memory.memos-enabled=${MEMORY_MEMOS_ENABLED:false}
memory.memos-url=${MEMORY_MEMOS_URL:http://107.173.38.186:8000}
memory.memos-top-k=${MEMORY_MEMOS_TOP_K:5}
memory.memos-timeout-ms=${MEMORY_MEMOS_TIMEOUT_MS:2000}

# Mem0 配置（轻量级记忆存储服务）- 完全独立
memory.mem0-enabled=${MEMORY_MEM0_ENABLED:true}
memory.mem0-url=${MEMORY_MEM0_URL:http://107.173.38.186:8888}
memory.mem0-timeout-ms=${MEMORY_MEM0_TIMEOUT_MS:2000}

# OpenTelemetry + Langfuse 配置（对话追踪和分析）
# OpenTelemetry Export (传递到 Langfuse) - 只导出 traces，不导出 logs
otel.exporter.otlp.traces.endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT:http://198.12.104.212:3000/api/public/otel}
otel.exporter.otlp.traces.headers=${OTEL_EXPORTER_OTLP_HEADERS:Authorization=Basic cGstbGYtZTQxOTRkYTAtOTZlZS00YmY1LWE1NTYtZmMzY2EyOWQ2ZWM0OnNrLWxmLTVhODk3NzJmLTEwZjQtNDE3My05NTZkLTEzNzhkNjM4ZWFmOQ==}

# 禁用 logs 和 metrics 导出，只保留 traces
otel.logs.exporter=none
otel.metrics.exporter=none

# Spring AI 观察配置
spring.ai.chat.observations.log-prompt=${AI_OBSERVATIONS_LOG_PROMPT:true}
spring.ai.chat.observations.log-completion=${AI_OBSERVATIONS_LOG_COMPLETION:true}

# 管理端点配置（用于观察性）
management.tracing.sampling.probability=${TRACING_SAMPLING_PROBABILITY:1.0}
management.observations.annotations.enabled=${OBSERVATIONS_ANNOTATIONS_ENABLED:true}

# OpenTelemetry 过滤配置 - 只收集 AI 相关的 traces
otel.instrumentation.common.default-enabled=false
otel.instrumentation.spring-ai.enabled=true
otel.instrumentation.micrometer.enabled=true
otel.instrumentation.logback-appender.enabled=false
otel.instrumentation.http.enabled=false
otel.instrumentation.jdbc.enabled=false

# 激活的配置文件（默认为开发环境）
spring.profiles.active=dev