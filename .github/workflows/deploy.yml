name: Deploy to Remote Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PUBLISH_IMAGES: "true"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      actions: write
    env:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
      GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container

    - name: Log in to Container Registry
      if: env.PUBLISH_IMAGES == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Optional GHCR PAT login (override actor login if provided)
      if: env.PUBLISH_IMAGES == 'true' && env.GHCR_PAT != ''
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.GHCR_USERNAME }}
        password: ${{ env.GHCR_PAT }}

    - name: Extract metadata (server)
      if: env.PUBLISH_IMAGES == 'true'
      id: meta_server
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-server
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-

    - name: Extract metadata (node)
      if: env.PUBLISH_IMAGES == 'true'
      id: meta_node
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-node
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-

    - name: Build and push Docker image (server)
      if: env.PUBLISH_IMAGES == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile-server
        push: true
        tags: ${{ steps.meta_server.outputs.tags }}
        labels: ${{ steps.meta_server.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false

    - name: Build and push Docker image (node)
      if: env.PUBLISH_IMAGES == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile-node
        push: true
        tags: ${{ steps.meta_node.outputs.tags }}
        labels: ${{ steps.meta_node.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false

    - name: Deploy to remote server
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST_IP }}
        username: ${{ secrets.HOST_USER }}
        password: ${{ secrets.HOST_PASSWORD }}
        script: |
          # Create deployment directory
          mkdir -p /opt/xiaozhi-deployment
          cd /opt/xiaozhi-deployment
          
          # Clone or update repository
          if [ -d "xiaozhi-esp32-server-java" ]; then
            cd xiaozhi-esp32-server-java
            git pull origin main
          else
            git clone https://github.com/augusdin/xiaozhi-esp32-server-java.git
            cd xiaozhi-esp32-server-java
          fi
          
          # Stop existing services
          docker-compose down 2>/dev/null || true

          # Start MySQL and wait for health
          docker-compose up -d mysql
          timeout 90s bash -c 'until [ "$(docker inspect -f {{.State.Health.Status}} $(docker-compose ps -q mysql))" = "healthy" ]; do sleep 3; done' || true

          # Try pulling prebuilt images (server/node). If pull fails (e.g. private), fallback to local build.
          docker-compose pull server node || true
          docker-compose up -d --no-build --no-deps server node || docker-compose up -d --build --no-deps server node

          # Ensure curl exists for readiness probe
          if ! command -v curl >/dev/null 2>&1; then
            apt-get update -y && apt-get install -y curl || true
          fi

          # Wait for server readiness (max 90s)
          timeout 90s bash -c 'until curl -sf http://localhost:8091/actuator/health >/dev/null; do sleep 3; done' || true
          
          # Show service status
          docker-compose ps
          
          # Show logs for verification
          docker-compose logs --tail=20

          # MemOS is managed outside of CI/CD to keep pipeline fast
