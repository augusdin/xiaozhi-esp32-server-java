# ================================
# Stage 1: Maven Dependencies Cache
# ================================
FROM eclipse-temurin:21-jdk AS deps-builder

# 安装Maven
RUN apt-get update && apt-get install -y --no-install-recommends \
    maven \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# 先复制pom.xml，利用Docker层缓存优化依赖下载
COPY pom.xml ./
RUN mvn dependency:go-offline -B

# ================================
# Stage 2: Model Downloader
# ================================
FROM alpine:latest AS model-downloader

# 添加构建参数，默认使用小模型提高速度
ARG VOSK_MODEL_SIZE=small

# 安装下载工具
RUN apk add --no-cache wget unzip

WORKDIR /models

# 复制现有模型文件
COPY ./models/silero_vad.onnx ./silero_vad.onnx

# 下载Vosk模型并优化
RUN if [ "$VOSK_MODEL_SIZE" = "small" ]; then \
        echo "Downloading optimized small Vosk model..." && \
        wget -q https://alphacephei.com/vosk/models/vosk-model-small-cn-0.22.zip && \
        unzip -q vosk-model-small-cn-0.22.zip && \
        mv vosk-model-small-cn-0.22 vosk-model && \
        rm vosk-model-small-cn-0.22.zip; \
    else \
        echo "Downloading standard Vosk model..." && \
        wget -q https://alphacephei.com/vosk/models/vosk-model-cn-0.22.zip && \
        unzip -q vosk-model-cn-0.22.zip && \
        mv vosk-model-cn-0.22 vosk-model && \
        rm vosk-model-cn-0.22.zip; \
    fi

# ================================
# Stage 3: Application Builder
# ================================
FROM eclipse-temurin:21-jdk AS app-builder

# 安装Maven
RUN apt-get update && apt-get install -y --no-install-recommends \
    maven \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build

# 复制缓存的依赖
COPY --from=deps-builder /root/.m2 /root/.m2

# 复制源代码并构建
COPY ./src ./src
COPY ./db ./db
COPY pom.xml ./

# 构建应用，跳过测试提高速度
RUN mvn clean package -DskipTests -B -q

# 提取版本号
RUN APP_VERSION=$(grep -A1 "<artifactId>xiaozhi.server</artifactId>" pom.xml | \
    grep "<version>" | sed -e 's/<version>//' -e 's/<\/version>//' -e 's/[[:space:]]//g') && \
    echo "APP_VERSION=${APP_VERSION}" > /build/app_version.env

# ================================
# Stage 4: Runtime Environment
# ================================
FROM eclipse-temurin:21-jre-alpine AS runtime

# 安装运行时依赖，使用Alpine减少镜像大小
RUN apk add --no-cache \
    ffmpeg \
    bash \
    curl \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# 复制应用JAR文件
COPY --from=app-builder /build/target/xiaozhi.server-*.jar /app/app.jar
COPY --from=app-builder /build/app_version.env /app/

# 复制模型文件
COPY --from=model-downloader /models /app/models

# 创建优化的启动脚本
RUN echo '#!/bin/bash\n\
set -e\n\
if [ -f /app/app_version.env ]; then\n\
  source /app/app_version.env\n\
  echo "Starting Xiaozhi Server version: ${APP_VERSION}"\n\
else\n\
  echo "Starting Xiaozhi Server"\n\
fi\n\
\n\
# JVM优化参数\n\
exec java \\\n\
  -server \\\n\
  -Xms256m \\\n\
  -Xmx768m \\\n\
  -XX:+UseG1GC \\\n\
  -XX:MaxGCPauseMillis=200 \\\n\
  -XX:+UnlockExperimentalVMOptions \\\n\
  -XX:+UseJVMCICompiler \\\n\
  -Djava.security.egd=file:/dev/./urandom \\\n\
  -Dspring.profiles.active=prod \\\n\
  -jar /app/app.jar\n\
' > /app/start.sh && chmod +x /app/start.sh

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:8091/actuator/health || exit 1

# 创建非root用户运行应用
RUN addgroup -g 1001 -S xiaozhi && \
    adduser -u 1001 -S xiaozhi -G xiaozhi && \
    chown -R xiaozhi:xiaozhi /app

USER xiaozhi

EXPOSE 8091

CMD ["/app/start.sh"]